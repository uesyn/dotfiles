#!/usr/bin/env bash

DEVBOX_IMAGE=${DEVBOX_IMAGE:-ghcr.io/uesyn/devbox:latest}
DEVBOX_NAMESPACE=${DEVBOX_NAMESPACE:-devbox}

help() {
  echo 'usage: d [SUBCOMMAND]

  SUBCOMMAND:
    test      test devbox with docker
    exec      exec devbox (default)
    create    create devbox
    delete    delete devbox
    restart   restart devbox
    help      show the help
'
}

exec() {
  kubectl -n ${DEVBOX_NAMESPACE} exec -it devbox-0 -- \
    env PROMPT_ICON="" \
    GITHUB_TOKEN="$GITHUB_TOKEN" \
    GIT_USER="$GIT_USER" \
    NOTE_REPO="$NOTE_REPO" \
    GH_ENTERPRISE_TOKEN="$GH_ENTERPRISE_TOKEN" \
    GIT_EMAIL="$GIT_EMAIL" \
    zsh
}

create() {
  cat << EOF | kubectl apply -f-
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: devbox
  name: ${DEVBOX_NAMESPACE}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: devbox
  name: devbox
  namespace: ${DEVBOX_NAMESPACE}
spec:
  replicas: 1
  serviceName: devbox
  selector:
    matchLabels:
      app: devbox
  template:
    metadata:
      labels:
        app: devbox
    spec:
      dnsPolicy: Default
      terminationGracePeriodSeconds: 3600
      containers:
      - image: ${DEVBOX_IMAGE}
        name: devbox
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Stop devbox when zellij, tmux and nvim are inactive or timeout is reached.
                touch /tmp/stopping
                end="\$(( \$(date +%s) + 1800 ))"

                while [[ "\$(date +%s)" -lt "\${end}" ]]; do
                  [[ "\$(ps -lC zellij | wc -l)" -eq 1 ]] && break
                  sleep 1s
                done

                while [[ "\$(date +%s)" -lt "\${end}" ]]; do
                  [[ "\$(ps -lC tmux | wc -l)" -eq 1 ]] && break
                  sleep 1s
                done

                while [[ "\$(date +%s)" -lt "\${end}" ]]; do
                  [[ "\$(ps -lC nvim | wc -l)" -eq 1 ]] && break
                  sleep 1s
                done

                rm /tmp/stopping
                sudo pkill supervisord
        securityContext:
          privileged: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: docker
          mountPath: /var/lib/docker
        - name: data
          mountPath: /home/devbox
      volumes:
      - name: tmp
        emptyDir: {}
      - name: docker
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi
EOF
}

delete() {
  kubectl -n ${DEVBOX_NAMESPACE} delete --ignore-not-found statefulset devbox
  kubectl -n ${DEVBOX_NAMESPACE} delete --ignore-not-found service devbox
  kubectl -n ${DEVBOX_NAMESPACE} delete --ignore-not-found secret devbox
}

restart() {
  kubectl -n ${DEVBOX_NAMESPACE} rollout status -w statefulset devbox
  kubectl -n ${DEVBOX_NAMESPACE} rollout restart statefulset devbox
  kubectl -n ${DEVBOX_NAMESPACE} rollout status -w statefulset devbox
}

test() {
  local container_name
  container_name="devbox"
  docker pull ${DEVBOX_IMAGE}
  docker run -d \
    --privileged \
    -v docker:/var/lib/docker \
    -v home:/home/devbox \
    --name ${container_name} \
    ${DEVBOX_IMAGE} >/dev/null
  while ! docker exec -it ${container_name} bash -c "test -e /home/devbox/.local/share/aquaproj-aqua/bin"; do
    echo "Waiting..."
    sleep 1s
  done
  docker exec -it \
    --detach-keys=ctrl-\\ \
    -e PROMPT_ICON="" \
    ${container_name} zsh
  docker rm -f ${container_name} >/dev/null
}

SUBCOMMAND=$1
case ${SUBCOMMAND} in
  create|c) create;;
  test|t) test;;
  exec|e) exec;;
  delete|d) delete;;
  restart|r) restart;;
  help|h) help;;
  "") exec;;
  *) help; exit 1;;
esac
