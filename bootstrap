#!/bin/sh

export OPT_DIR=${OPT_DIR:-${HOME}/opt}
export OPT_BIN=${OPT_DIR}/bin
export BOOTSTRAP_CACHE_DIR=${HOME}/.cache/bootstrap
mkdir -p ${OPT_BIN}
mkdir -p ${BOOTSTRAP_CACHE_DIR}
export PATH="${OPT_BIN}:${PATH}"
SCRIPT_DIR="$(cd $(dirname $0); pwd)"

# fork from https://starship.rs/install.sh
info() {
  printf '%s\n' "${BOLD}${GREY}>${NO_COLOR} $*"
}

# fork from https://starship.rs/install.sh
warn() {
  printf '%s\n' "${YELLOW}! $*${NO_COLOR}"
}

# fork from https://starship.rs/install.sh
error() {
  printf '%s\n' "${RED}x $*${NO_COLOR}" >&2
}

# fork from https://starship.rs/install.sh
detect_target() {
  platform="$(uname -s | tr '[:upper:]' '[:lower:]')"
  arch="$(uname -m | tr '[:upper:]' '[:lower:]')"

  case "${platform}" in
    linux) platform="linux" ;;
    darwin) platform="darwin" ;;
  esac

  case "${arch}" in
    x86_64) arch="amd64" ;;
    aarch64) arch="arm64" ;;
    armv*) arch="arm" ;;
  esac

  printf '%s' "$platform-$arch"
}

calc_hash() {
  echo -n "$1" | shasum -a 256 | cut -c-64
}

download() {
  hash_key="$1"
  url="$2"
  file="${BOOTSTRAP_CACHE_DIR}/$(calc_hash ${hash_key})"
  tmpfile="$file.tmp"

  [ -f ${file} ] && return

  info "Downloading ${url}..."
  if [ -x "$(command -v curl)" ]; then
    cmd="curl --fail --silent --location --output $tmpfile $url"
  elif [ -x "$(command -v wget)" ]; then
    cmd="wget --quiet --output-document=$tmpfile $url"
  else
    error "No HTTP download program (curl, wget, fetch) found, exiting..."
    return 1
  fi

  $cmd && mv $tmpfile $file && return 0
  return $?
}

download_if_darwin_arm64() {
  [ "$(detect_target)" != "darwin-arm64" ] && return
  download "$1" "$2"
  return $?
}

download_if_darwin_amd64() {
  [ "$(detect_target)" != "darwin-amd64" ] && return
  download "$1" "$2"
  return $?
}

download_if_linux_arm64() {
  [ "$(detect_target)" != "linux-arm64" ] && return
  download "$1" "$2"
  return $?
}

download_if_linux_amd64() {
  [ "$(detect_target)" != "linux-amd64" ] && return
  download "$1" "$2"
  return $?
}

get_cache_file() {
  key=$1
  cache_file="${BOOTSTRAP_CACHE_DIR}/$(calc_hash ${key})"
  [ -f ${cache_file} ] && echo -n ${cache_file}
}

make_link() {
  from=$1
  to=$2
  mkdir -p $(dirname ${to})
  [ -L ${to} ] && rm ${to}
  ln -sfn ${from} ${to}
}

make_links(){
  XDG_CONFIG_HOME=${HOME}/.config
  make_link ${SCRIPT_DIR}/bashrc ${HOME}/.bashrc
  make_link ${SCRIPT_DIR}/bash_profile ${HOME}/.bash_profile
  make_link ${SCRIPT_DIR}/zshrc ${HOME}/.zshrc
  make_link ${SCRIPT_DIR}/zsh ${XDG_CONFIG_HOME}/zsh
  make_link ${SCRIPT_DIR}/nvim ${XDG_CONFIG_HOME}/nvim
  make_link ${SCRIPT_DIR}/git ${XDG_CONFIG_HOME}/git
  make_link ${SCRIPT_DIR}/aqua/aqua.yaml ${XDG_CONFIG_HOME}/aquaproj-aqua/aqua.yaml
  make_link ${SCRIPT_DIR}/gh/config.yml ${XDG_CONFIG_HOME}/gh/config.yml
  make_link ${SCRIPT_DIR}/zellij ${XDG_CONFIG_HOME}/zellij
  make_link ${SCRIPT_DIR}/wezterm.lua ${XDG_CONFIG_HOME}/wezterm/wezterm.lua
  make_link ${SCRIPT_DIR}/devbox ${XDG_CONFIG_HOME}/devbox
  make_link ${SCRIPT_DIR}/rtx ${XDG_CONFIG_HOME}/rtx
  make_link ${SCRIPT_DIR}/tmux ${XDG_CONFIG_HOME}/tmux
  for file in ${SCRIPT_DIR}/bin/*; do make_link ${SCRIPT_DIR}/bin/${file##*/} ${HOME}/opt/bin/${file##*/}; done
}

TEA_PREFIX=${TEA_PREFIX:-${HOME}/.tea}

setup_tea() {
  info "Installing tea..."

  tea_tmp=/tmp/tea.tar.gz
  tea_path="${OPT_BIN}/tea"
  tea_version="0.31.2"

  tea_key="tea_${tea_version}"
  download_if_linux_arm64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+linux+aarch64.tar.xz
  download_if_linux_amd64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+linux+x86-64.tar.xz
  download_if_darwin_arm64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+darwin+aarch64.tar.xz
  download_if_darwin_amd64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+darwin+x86-64.tar.xz

  cache_file=$(get_cache_file "${tea_key}")

  tar xJf ${cache_file} -C ${OPT_BIN}
  chmod u+x ${tea_path}
  [ ! -d ${HOME}/.tea ] && ${tea_path} --sync
  info "tea installed!"
}

setup_zsh() {
  info "Installing zsh..."
  if [ -x "$(command -v zsh)" ]; then
    return
  fi
  zsh_dir=${HOME}/opt/zsh
  zsh_bin_version=6.1.1
  sh -c "$(curl -SsfL https://raw.githubusercontent.com/romkatv/zsh-bin/v${zsh_bin_version}/install)" -- -e no -d ${zsh_dir} -q
  info "zsh installed!"
}

install_aqua() {
  aqua_version=2.3.6
  info "Installing aqua..."

  aqua_key="aqua_${aqua_version}"
  download_if_linux_arm64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_arm64.tar.gz
  download_if_linux_amd64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_amd64.tar.gz
  download_if_darwin_arm64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_arm64.tar.gz
  download_if_darwin_amd64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_amd64.tar.gz

  cache_file=$(get_cache_file "${aqua_key}")
  aqua_bin=${OPT_BIN}/aqua
  tar xzf ${cache_file} -O aqua > ${aqua_bin}
  chmod +x ${aqua_bin}
}

setup_aqua() {
  install_aqua
  export AQUA_GLOBAL_CONFIG=${HOME}/.config/aquaproj-aqua/aqua.yaml
  export PATH=${HOME}/.local/share/aquaproj-aqua/bin:${PATH}
  aqua install -a --tags precede
  info "aqua installed!"
}

install_neovim() {
  info "Installing neovim..."
  neovim_dir=${OPT_DIR}/nvim
  neovim_bin_dir=${neovim_dir}/bin
  export PATH=${neovim_bin_dir}:$PATH
  neovim_version=v0.9.0

  neovim_key="neovim_${neovim_version}"
  download_if_linux_arm64 ${neovim_key} https://github.com/uesyn/neovim-arm64-builder/releases/download/${neovim_version}/nvim-linux-arm64.tar.gz
  download_if_linux_amd64 ${neovim_key} https://github.com/neovim/neovim/releases/download/${neovim_version}/nvim-linux64.tar.gz
  download_if_darwin_arm64 ${neovim_key} https://github.com/neovim/neovim/releases/download/${neovim_version}/nvim-macos.tar.gz
  download_if_darwin_amd64 ${neovim_key} https://github.com/neovim/neovim/releases/download/${neovim_version}/nvim-macos.tar.gz

  cache_file=$(get_cache_file ${neovim_key})

  rm -rf ${neovim_dir}
  mkdir -p ${neovim_dir}
  tar xzf ${cache_file} --strip-components=1 -C ${neovim_dir}
  info "neovim installed!"
}

make_local_configs() {
  zlogin_file=${HOME}/.zlogin
  if [ ! -f "${zlogin_file}" ]; then
    cat << 'EOF' > ${zlogin_file}
export PROMPT_KUBE_TRIM_PREFIX=""
export PROMPT_KUBE_IMPORT_CONTEXT_PATTERN=${PROMPT_KUBE_IMPORT_CONTEXT_PATTERN:-}
export GH_ENTERPRISE_HOST=${GH_ENTERPRISE_HOST:-}
export GH_ENTERPRISE_TOKEN=${GH_ENTERPRISE_TOKEN:-}
export GITHUB_TOKEN=${GITHUB_TOKEN:-}
export GITLAB_ENTERPRISE_HOST=${GITLAB_ENTERPRISE_HOST:-}
export GITLAB_ENTERPRISE_TOKEN=${GITLAB_ENTERPRISE_TOKEN:-}
export GITLAB_TOKEN=${GITLAB_TOKEN:-}
if [[ -n "$MY_GITHUB_TOKEN" ]]; then
  export GITHUB_TOKEN=$MY_GITHUB_TOKEN
fi
EOF
  fi
}

show_infos() {
  local file="${HOME}/.cache/.bootstrapped"
  [ -f "${file}" ] && return;
  touch ${file}
  case "$(uname -r)" in
    *WSL2)
      cat <<- EOF
==================== INFO ======================
* Create /etc/wsl.conf with below contents:
[boot]
systemd=true

[interop]
appendWindowsPath=true

[network]
generateResolvConf = false

* Create /etc/resolv.conf with below contents:
nameserver 8.8.8.8

* Install Icons
(ref: https://learn.microsoft.com/ja-jp/windows/terminal/tutorials/custom-prompt-setup#use-terminal-icons-to-add-missing-folder-or-file-icons)
$ Install-Module -Name Terminal-Icons -Repository PSGallery
================================================
EOF
    ;;
  esac
}

setup_rtx() {
  info "Installing rtx..."
  rtx_version=v1.29.3
  rtx_key="rtx_${rtx_version}"

  download_if_linux_arm64 ${rtx_key} https://github.com/jdxcode/rtx/releases/download/${rtx_version}/rtx-${rtx_version}-linux-arm64.tar.gz
  download_if_linux_amd64 ${rtx_key} https://github.com/jdxcode/rtx/releases/download/${rtx_version}/rtx-${rtx_version}-linux-x64.tar.gz
  download_if_darwin_arm64 ${rtx_key} https://github.com/jdxcode/rtx/releases/download/${rtx_version}/rtx-${rtx_version}-macos-arm64.tar.gz
  download_if_darwin_amd64 ${rtx_key} https://github.com/jdxcode/rtx/releases/download/${rtx_version}/rtx-${rtx_version}-macos-x64.tar.gz

  cache_file=$(get_cache_file ${rtx_key})
  tar xzf ${cache_file} -C ${OPT_BIN} rtx/bin/rtx --strip-components=2
  info "rtx installed!"
}

setup_rust_analyzer() {
  info "Install rust-analyzer..."
  rust_analyzer_version=2023-05-01
  rust_analyzer_key=rust-analyzer_${rust_analyzer_version}

  download_if_linux_arm64 ${rust_analyzer_key} https://github.com/rust-lang/rust-analyzer/releases/download/${rust_analyzer_version}/rust-analyzer-aarch64-unknown-linux-gnu.gz
  download_if_linux_amd64 ${rust_analyzer_key} https://github.com/rust-lang/rust-analyzer/releases/download/${rust_analyzer_version}/rust-analyzer-x86_64-unknown-linux-gnu.gz
  download_if_darwin_arm64 ${rust_analyzer_key} https://github.com/rust-lang/rust-analyzer/releases/download/${rust_analyzer_version}/rust-analyzer-aarch64-apple-darwin.gz
  download_if_darwin_amd64 ${rust_analyzer_key} https://github.com/rust-lang/rust-analyzer/releases/download/${rust_analyzer_version}/rust-analyzer-x86_64-apple-darwin.gz

  cache_file=$(get_cache_file ${rust_analyzer_key})
  rust_analyzer_bin=${OPT_BIN}/rust-analyzer
  gunzip -k -c ${cache_file} > ${rust_analyzer_bin}
  chmod +x ${rust_analyzer_bin}
}

make_tea_command() {
  bin_name=$1
  tea_args=$2
  shift 2
  depends=$@
  depend_args=
  for d in ${depends}; do
    if [ -n ${depend_args} ]; then
      depend_args="+${d} ${depend_args}"
    else
      depend_args="+${d}"
    fi
  done

  cmd="tea ${depend_args} ${bin_name}"
  if [ -n ${tea_args} ]; then
    cmd="tea ${tea_args} ${depend_args} ${bin_name}"
  fi

  bin_path=${OPT_BIN}/${bin_name}
  cat <<EOF > ${bin_path}
#!/usr/bin/env sh

${cmd} "\$@"
EOF
  chmod +x ${bin_path}
}

setup_neovim() {
  info "Installing neovim and plugins..."
  # install_neovim
  make_tea_command "nvim" "" "neovim.io=0.9.0"
  nvim --headless "+Lazy! restore" +qa
}

setup_jq() {
  info "Installing jq..."
  make_tea_command "jq" "--silent" "stedolan.github.io/jq=1.6"
}

setup_gh() {
  info "Installing gh ..."
  make_tea_command "gh" "--silent" "cli.github.com=v2.27.0"
}

setup_tmux() {
  info "Installing tmux..."
  make_tea_command "tmux" "" "github.com/tmux/tmux=3.3"
}

setup_node() {
  info "Installing node..."
  node_version=v20.0.0
  npm_version=9.6.5
  make_tea_command "node" "--silent" "nodejs.org=${node_version}" "npmjs.com=${npm_version}"
  make_tea_command "npx" "--silent" "nodejs.org=${node_version}" "npmjs.com=${npm_version}"
  make_tea_command "npm" "--silent" "nodejs.org=${node_version}" "npmjs.com=${npm_version}"
}

setup_deno() {
  info "Installing deno..."
  make_tea_command "deno" "--silent" "deno.land=1.33.0"
}

setup_go() {
  info "Installing go..."
  go_version=1.20.3
  gopls_version=v0.11.0
  make_tea_command "go" "" "go.dev=${go_version}"
  gopls_path=${OPT_BIN}/gopls
  cat <<EOF > ${gopls_path}
#!/usr/bin/env sh

tea --silent +go.dev=${go_version} go run golang.org/x/tools/gopls@${gopls_version} "\$@"
EOF
  chmod +x ${gopls_path}
}

setup_python() {
  info "Installing python..."
  python_version=3.11.3
  pip_version=23.1.2
  make_tea_command "python" "" "python.org=${python_version}" "pip.pypa.io=${pip_version}"
  make_tea_command "pip" "" "python.org=${python_version}" "pip.pypa.io=${pip_version}"
}

setup_rustup_init() {
  info "Installing rustup-init..."
  rustup_init_path=${OPT_BIN}/rustup-init
  cat <<EOF > ${rustup_init_path}
#!/usr/bin/env sh

tea rustup-init --no-modify-path --default-toolchain nightly --profile default "\$@"
EOF
  chmod +x ${rustup_init_path}
}

### main ###
make_links
make_local_configs
setup_tea &
# setup_zsh &
setup_aqua &
setup_rtx &
setup_rust_analyzer &
wait
setup_neovim
setup_jq
setup_gh
setup_tmux
setup_node
setup_deno
setup_python
setup_go
setup_rustup_init
wait
show_infos
