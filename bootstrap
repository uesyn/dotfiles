#!/bin/sh

set -eu

info() {
  printf '%s\n' "> $*"
}

warn() {
  printf '%s\n' "[W] $*"
}

error() {
  printf '%s\n' "[E] $*" >&2
}

is_wsl2() {
  case "$(uname -r)" in
    *WSL2)
      return 0
  esac
  return 1
}

if [ -z "${HOME}" ]; then
  error "Must set HOME env"
  exit 1
fi

export OPT_DIR=${OPT_DIR:-${HOME}/opt}
export OPT_BIN=${OPT_DIR}/bin
export OPT_PKGX_DIR=${OPT_DIR}/pkgx
export OPT_PKGX_BIN=${OPT_PKGX_DIR}/bin
export BOOTSTRAP_CACHE_DIR=${HOME}/.cache/bootstrap
mkdir -p ${OPT_BIN}
mkdir -p ${BOOTSTRAP_CACHE_DIR}
export PATH="${OPT_BIN}:${OPT_PKGX_BIN}:${PATH}"
SCRIPT_DIR="$(cd $(dirname $0); pwd)"
ENVS_DIR=${OPT_DIR}/pkgx/envs

detect_target() {
  platform="$(uname -s | tr '[:upper:]' '[:lower:]')"
  arch="$(uname -m | tr '[:upper:]' '[:lower:]')"

  case "${platform}" in
    linux) platform="linux" ;;
    darwin) platform="darwin" ;;
  esac

  case "${arch}" in
    x86_64) arch="amd64" ;;
    aarch64) arch="arm64" ;;
    armv*) arch="arm" ;;
  esac

  printf '%s' "$platform-$arch"
}

calc_hash() {
  if [ -x "$(command -v sha256sum)" ]; then
    printf "$1" | sha256sum | cut -c-64
    return
  elif [ -x "$(command -v shasum)" ]; then
    printf "$1" | shasum -a 256 | cut -c-64
    return
  fi
  return 1
}

download() {
  hash_key="$1"
  url="$2"
  file="${BOOTSTRAP_CACHE_DIR}/$(calc_hash ${hash_key})"
  tmpfile="$file.tmp"

  [ -f ${file} ] && return

  info "Downloading ${url}..."
  if [ -x "$(command -v curl)" ]; then
    cmd="curl --fail --silent --location --output $tmpfile $url"
  elif [ -x "$(command -v wget)" ]; then
    cmd="wget --quiet --output-document=$tmpfile $url"
  else
    error "No HTTP download program (curl, wget, fetch) found, exiting..."
    return 1
  fi

  $cmd && mv $tmpfile $file && return 0
  return $?
}

download_if_darwin_arm64() {
  [ "$(detect_target)" != "darwin-arm64" ] && return
  download "$1" "$2"
  return $?
}

download_if_darwin_amd64() {
  [ "$(detect_target)" != "darwin-amd64" ] && return
  download "$1" "$2"
  return $?
}

download_if_linux_arm64() {
  [ "$(detect_target)" != "linux-arm64" ] && return
  download "$1" "$2"
  return $?
}

download_if_linux_amd64() {
  [ "$(detect_target)" != "linux-amd64" ] && return
  download "$1" "$2"
  return $?
}

get_cache() {
  key=$1
  cache_file="${BOOTSTRAP_CACHE_DIR}/$(calc_hash ${key})"
  [ -f ${cache_file} ] && printf ${cache_file}
}

make_link() {
  from=$1
  to=$2
  mkdir -p $(dirname ${to})
  [ -L ${to} ] && rm ${to}
  ln -sfn ${from} ${to}
}

make_links(){
  XDG_CONFIG_HOME=${HOME}/.config
  make_link ${SCRIPT_DIR}/bashrc ${HOME}/.bashrc
  make_link ${SCRIPT_DIR}/bash_profile ${HOME}/.bash_profile
  make_link ${SCRIPT_DIR}/zshrc ${HOME}/.zshrc
  make_link ${SCRIPT_DIR}/zsh ${XDG_CONFIG_HOME}/zsh
  make_link ${SCRIPT_DIR}/nvim ${XDG_CONFIG_HOME}/nvim
  make_link ${SCRIPT_DIR}/git ${XDG_CONFIG_HOME}/git
  make_link ${SCRIPT_DIR}/gh/config.yml ${XDG_CONFIG_HOME}/gh/config.yml
  make_link ${SCRIPT_DIR}/zellij ${XDG_CONFIG_HOME}/zellij
  make_link ${SCRIPT_DIR}/wezterm.lua ${XDG_CONFIG_HOME}/wezterm/wezterm.lua
  make_link ${SCRIPT_DIR}/devk ${XDG_CONFIG_HOME}/devk
  make_link ${SCRIPT_DIR}/mise ${XDG_CONFIG_HOME}/mise
  make_link ${SCRIPT_DIR}/tmux ${XDG_CONFIG_HOME}/tmux
  for file in ${SCRIPT_DIR}/bin/*; do make_link ${SCRIPT_DIR}/bin/${file##*/} ${OPT_BIN}/${file##*/}; done
  if ! is_wsl2; then
    rm ${OPT_BIN}/open
  fi
}

setup_pkgx() {
  info "Installing pkgx..."
  version="1.1.3"
  key="pkgx_${version}"
  download_if_linux_arm64 ${key} https://github.com/pkgxdev/pkgx/releases/download/v${version}/pkgx-${version}+linux+aarch64.tar.xz
  download_if_linux_amd64 ${key} https://github.com/pkgxdev/pkgx/releases/download/v${version}/pkgx-${version}+linux+x86-64.tar.xz
  download_if_darwin_arm64 ${key} https://github.com/pkgxdev/pkgx/releases/download/v${version}/pkgx-${version}+darwin+aarch64.tar.xz
  download_if_darwin_amd64 ${key} https://github.com/pkgxdev/pkgx/releases/download/v${version}/pkgx-${version}+darwin+x86-64.tar.xz

  cache_file=$(get_cache "${key}")

  tar xJf ${cache_file} -C ${OPT_BIN}
  pkgx_bin="${OPT_BIN}/pkgx"
  chmod u+x ${pkgx_bin}
  [ ! -d ${HOME}/.pkgx ] && ${pkgx_bin} --sync
}

install_neovim() {
  info "Installing neovim..."
  neovim_dir=${OPT_DIR}/nvim
  neovim_bin_dir=${neovim_dir}/bin
  export PATH=${neovim_bin_dir}:$PATH
  version=v0.9.4

  key="neovim_${version}"
  download_if_linux_arm64 ${key} https://github.com/uesyn/neovim-arm64-builder/releases/download/${version}/nvim-linux-arm64.tar.gz
  download_if_linux_amd64 ${key} https://github.com/neovim/neovim/releases/download/${version}/nvim-linux64.tar.gz
  download_if_darwin_arm64 ${key} https://github.com/neovim/neovim/releases/download/${version}/nvim-macos.tar.gz
  download_if_darwin_amd64 ${key} https://github.com/neovim/neovim/releases/download/${version}/nvim-macos.tar.gz

  cache_file=$(get_cache ${key})

  rm -rf ${neovim_dir}
  mkdir -p ${neovim_dir}
  tar xzf ${cache_file} --strip-components=1 -C ${neovim_dir}
  make_link ${neovim_bin_dir}/nvim ${OPT_BIN}/nvim
}

make_local_configs() {
  zlogin_file=${HOME}/.zlogin
  if [ ! -f "${zlogin_file}" ]; then
    cat << 'EOF' > ${zlogin_file}
export PROMPT_KUBE_TRIM_PREFIX=""
export PROMPT_KUBE_IMPORT_CONTEXT_PATTERN=${PROMPT_KUBE_IMPORT_CONTEXT_PATTERN:-}
export GH_ENTERPRISE_HOST=${GH_ENTERPRISE_HOST:-}
export GH_ENTERPRISE_TOKEN=${GH_ENTERPRISE_TOKEN:-}
export GITHUB_TOKEN=${GITHUB_TOKEN:-}
export GITLAB_ENTERPRISE_HOST=${GITLAB_ENTERPRISE_HOST:-}
export GITLAB_ENTERPRISE_TOKEN=${GITLAB_ENTERPRISE_TOKEN:-}
export GITLAB_TOKEN=${GITLAB_TOKEN:-}
EOF
  fi

  bashrc_local_file=${HOME}/.bashrc.local
  if [ ! -f "${bashrc_local_file}" ]; then
    cat << 'EOF' > ${bashrc_local_file}
source ${zlogin_file}
EOF
  fi
}

setup_for_wsl2() {
  if ! is_wsl2; then
    return
  fi
  if [ -f ${HOME}/.bootstrapped ]; then
    return
  fi
  sudo tee /etc/sudoers.d/$(whoami) << EOF >/dev/null
$(whoami) ALL=(ALL) NOPASSWD:ALL
EOF
  sudo tee /etc/wsl.conf <<EOF >/dev/null
[boot]
systemd=true
EOF

  winuser="$(powershell.exe '$env:UserName' | tr -d '\r\n')"
  sudo tee /mnt/c/Users/${winuser}/.wslconfig <<EOF >/dev/null
[experimental]
autoMemoryReclaim=dropcache
sparseVhd=true
autoProxy=true
networkingMode=mirrored
dnsTunneling=true
firewall=true
EOF
  ln -sfn /mnt/c/Users/${winuser}/Desktop ${HOME}/Desktop
  sudo add-apt-repository ppa:wslutilities/wslu --yes
  sudo apt update && sudo apt install -y git curl bash zsh build-essential pkg-config wslu
  wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb
  sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb
  rm libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb
  touch ${HOME}/.bootstrapped

  cat <<EOF
================================================
* Install Icons
(ref: https://learn.microsoft.com/ja-jp/windows/terminal/tutorials/custom-prompt-setup#use-terminal-icons-to-add-missing-folder-or-file-icons)
$ Install-Module -Name Terminal-Icons -Repository PSGallery
================================================
EOF
}

setup_mise() {
  info "Installing mise..."
  version=v2024.2.0
  key="mise_${version}"


  download_if_linux_arm64 ${key} https://github.com/jdx/mise/releases/download/${version}/mise-${version}-linux-arm64-musl
  download_if_linux_amd64 ${key} https://github.com/jdx/mise/releases/download/${version}/mise-${version}-linux-x64-musl
  download_if_darwin_arm64 ${key} https://github.com/jdx/mise/releases/download/${version}/mise-${version}-macos-arm64
  download_if_darwin_amd64 ${key} https://github.com/jdx/mise/releases/download/${version}/mise-${version}-macos-x64

  cache_file=$(get_cache ${key})
  cp ${cache_file} ${OPT_BIN}/mise
  chmod +x ${OPT_BIN}/mise
}

make_pkgx_command2() {
  cmd_name=$1
  pkgx_opts=$2
  bin_path=${OPT_PKGX_BIN}/${cmd_name}

  mkdir -p ${OPT_PKGX_BIN}
  cat <<EOF > ${bin_path}
#!/usr/bin/env bash

if [[ ! -e "${ENVS_DIR}/${cmd_name}" ]] || [[ ! -s "${ENVS_DIR}/${cmd_name}" ]]; then
  mkdir -p ${ENVS_DIR}
  command pkgx --internal.use ${pkgx_opts} 2>/dev/null > ${ENVS_DIR}/${cmd_name}.tmp
  mv ${ENVS_DIR}/${cmd_name}.tmp ${ENVS_DIR}/${cmd_name}
fi
source ${ENVS_DIR}/${cmd_name}

exec ${cmd_name} "\$@"
EOF
  chmod +x ${bin_path}
}

setup_neovim() {
  info "Installing neovim and plugins..."
  make_pkgx_command2 "nvim" "+neovim.io"
  install_neovim
  nvim --headless "+Lazy! restore" +qa
  git checkout -- ${SCRIPT_DIR}/nvim/lazy-lock.json
  nvim --headless "+Lazy! restore" +qa
}

setup_jq() {
  info "Installing jq..."
  version=1.7
  key="jq_${version}"

  download_if_linux_arm64 ${key} https://github.com/jqlang/jq/releases/download/jq-${version}/jq-linux-arm64
  download_if_linux_amd64 ${key} https://github.com/jqlang/jq/releases/download/jq-${version}/jq-linux64
  download_if_darwin_arm64 ${key} https://github.com/jqlang/jq/releases/download/jq-${version}/jq-macos-arm64
  download_if_darwin_amd64 ${key} https://github.com/jqlang/jq/releases/download/jq-${version}/jq-macos-amd64

  cache_file=$(get_cache ${key})
  cp ${cache_file} ${OPT_BIN}/jq
  chmod +x ${OPT_BIN}/jq
}

setup_rustup_init() {
  info "Installing rustup-init..."
  version=1.27.0
  key="rustup-init_${version}"

  download ${key} https://raw.githubusercontent.com/rust-lang/rustup/${version}/rustup-init.sh
  cache_file=$(get_cache ${key})
  cp ${cache_file} ${OPT_BIN}/rustup-init
  chmod +x ${OPT_BIN}/rustup-init
}

setup_yq() {
  info "Installing yq..."
  version=v4.34.1
  make_pkgx_command2 "yq" "+github.com/mikefarah/yq=${version}"
}

setup_gh() {
  info "Installing gh ..."
  version=v2.37.0
  make_pkgx_command2 "gh" "+cli.github.com=${version}"
}

setup_tmux() {
  info "Installing tmux..."
  version=3.4
  make_pkgx_command2 "tmux" "+github.com/tmux/tmux=${version}"
}

setup_zellij() {
  info "Installing zellij..."
  version=v0.39.2
  make_pkgx_command2 "zellij" "+crates.io/zellij=${version}"
}

setup_stern() {
  info "Installing stern..."
  version=1.26.0
  make_pkgx_command2 "stern" "+github.com/stern/stern=${version}"
}

setup_kubebuilder() {
  info "Installing kubebuilder..."
  version=3.13.0
  make_pkgx_command2 "kubebuilder" "+kubebuilder.io=${version}"
}

setup_kubectl_krew() {
  info "Installing kubectl-krew..."
  make_pkgx_command2 "kubectl-krew" "+krew.sigs.k8s.io"
}

setup_conftest() {
  info "Installing conftest..."
  version=0.46.0
  make_pkgx_command2 "conftest" "+conftest.dev=${version}"
}

setup_opa() {
  info "Installing opa..."
  version=0.58.0
  make_pkgx_command2 "opa" "+openpolicyagent.org=${version}"
}

setup_ghq() {
  info "Installing ghq..."
  version=1.4.2
  make_pkgx_command2 "ghq" "+github.com/x-motemen/ghq=${version}"
}

setup_fzf() {
  info "Installing fzf..."
  version=0.48.1
  key="fzf_${version}"

  download_if_linux_arm64 ${key} https://github.com/junegunn/fzf/releases/download/${version}/fzf-${version}-linux_arm64.tar.gz
  download_if_linux_amd64 ${key} https://github.com/junegunn/fzf/releases/download/${version}/fzf-${version}-linux_amd64.tar.gz
  download_if_darwin_arm64 ${key} https://github.com/junegunn/fzf/releases/download/${version}/fzf-${version}-darwin_arm64.zip
  download_if_darwin_amd64 ${key} https://github.com/junegunn/fzf/releases/download/${version}/fzf-${version}-darwin_amd64.zip

  cache_file=$(get_cache ${key})
  case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    linux)
      tar xzf ${cache_file} -C ${OPT_BIN}
      ;;
    darwin)
      unzip -p ${cache_file} > ${OPT_BIN}/fzf
      chmod +x ${OPT_BIN}/fzf
      ;;
  esac
}

setup_ripgrep() {
  info "Installing ripgrep..."
  version=13.0.0-10
  key="ripgrep_${version}"

  download_if_linux_arm64 ${key} https://github.com/microsoft/ripgrep-prebuilt/releases/download/v${version}/ripgrep-v${version}-aarch64-unknown-linux-musl.tar.gz
  download_if_linux_amd64 ${key}  https://github.com/microsoft/ripgrep-prebuilt/releases/download/v${version}/ripgrep-v${version}-x86_64-unknown-linux-musl.tar.gz
  download_if_darwin_arm64 ${key} https://github.com/microsoft/ripgrep-prebuilt/releases/download/v${version}/ripgrep-v${version}-aarch64-apple-darwin.tar.gz 
  download_if_darwin_amd64 ${key} https://github.com/microsoft/ripgrep-prebuilt/releases/download/v${version}/ripgrep-v${version}-x86_64-apple-darwin.tar.gz

  cache_file=$(get_cache ${key})
  tar xzf ${cache_file} -C ${OPT_BIN}
}

setup_aws() {
  info "Installing aws..."
  make_pkgx_command2 "aws" "+aws.amazon.com/cli"
}

setup_silicon() {
  info "Installing silicon..."
  make_pkgx_command2 "silicon" "+crates.io/silicon"
}

setup_mc() {
  info "Installing mc"
  make_pkgx_command2 "mc" "+min.io/mc"
}

setup_vault() {
  info "Installing vault"
  make_pkgx_command2 "vault" "+vault"
}

setup_docker_commands() {
  info "Installing docker..."
  make_pkgx_command2 "docker-credential-ecr-login" "+github.com/awslabs/amazon-ecr-credential-helper"
}

### main ###
make_links
make_local_configs
setup_pkgx &
setup_mise &
setup_jq &
setup_fzf &
setup_ripgrep &
setup_rustup_init &
wait
if [ -d ${OPT_PKGX_DIR} ]; then
  rm -rf ${OPT_PKGX_DIR}
fi
setup_neovim &
setup_yq &
setup_gh &
setup_tmux &
setup_zellij &
setup_aws &
setup_stern &
setup_kubebuilder &
setup_kubectl_krew &
setup_conftest &
setup_opa &
setup_ghq &
setup_mc &
setup_vault &
setup_silicon &
setup_docker_commands &
wait
mise install -y
setup_for_wsl2
