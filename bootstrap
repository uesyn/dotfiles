#!/bin/sh

set -eu

is_wsl2() {
  case "$(uname -r)" in
    *WSL2)
      return 0
  esac
  return 1
}

if [ -z "${HOME}" ]; then
  echo "Must set HOME env"
  exit 1
fi

export OPT_DIR="${OPT_DIR:-${HOME}/opt}"
export OPT_BIN="${OPT_DIR}"/bin
mkdir -p "${OPT_BIN}"
export PATH="${OPT_BIN}:${PATH}"
SCRIPT_DIR="$(cd $(dirname $0); pwd)"

get_architecture() {
    _ostype="$(uname -s)"
    _cputype="$(uname -m)"

    if [ "$_ostype" = Linux ]; then
        if [ "$(uname -o)" = Android ]; then
            _ostype=Android
        fi
        if ldd --version 2>&1 | grep -q 'musl'; then
            _clibtype="musl"
        fi
    fi

    if [ "$_ostype" = Darwin ]; then
        # Darwin `uname -m` can lie due to Rosetta shenanigans. If you manage to
        # invoke a native shell binary and then a native uname binary, you can
        # get the real answer, but that's hard to ensure, so instead we use
        # `sysctl` (which doesn't lie) to check for the actual architecture.
        if [ "$_cputype" = i386 ]; then
            # Handling i386 compatibility mode in older macOS versions (<10.15)
            # running on x86_64-based Macs.
            # Starting from 10.15, macOS explicitly bans all i386 binaries from running.
            # See: <https://support.apple.com/en-us/HT208436>

            # Avoid `sysctl: unknown oid` stderr output and/or non-zero exit code.
            if sysctl hw.optional.x86_64 2> /dev/null || true | grep -q ': 1'; then
                _cputype=x86_64
            fi
        elif [ "$_cputype" = x86_64 ]; then
            # Handling x86-64 compatibility mode (a.k.a. Rosetta 2)
            # in newer macOS versions (>=11) running on arm64-based Macs.
            # Rosetta 2 is built exclusively for x86-64 and cannot run i386 binaries.

            # Avoid `sysctl: unknown oid` stderr output and/or non-zero exit code.
            if sysctl hw.optional.arm64 2> /dev/null || true | grep -q ': 1'; then
                _cputype=arm64
            fi
        fi
    fi

    case "$_ostype" in
        Linux)
            _ostype=linux
            ;;

        Darwin)
            _ostype=darwin
            ;;
        *)
            echo "unrecognized OS type: $_ostype" >&2
	    exit 1
            ;;
    esac

    case "$_cputype" in
        aarch64 | arm64)
            _cputype=aarch64
            ;;
        x86_64 | x86-64 | x64 | amd64)
            _cputype=x86_64
            ;;
        *)
            echo "unknown CPU type: $_cputype" >&2
	    exit 1
            ;;
    esac

    echo "${_cputype}-${_ostype}"
}


setup_for_wsl2() {
  if ! is_wsl2; then
    return
  fi
  if [ -f ${HOME}/.bootstrapped ]; then
    return
  fi
  sudo tee /etc/sudoers.d/$(whoami) << EOF >/dev/null
$(whoami) ALL=(ALL) NOPASSWD:ALL
EOF
  sudo tee /etc/wsl.conf <<EOF >/dev/null
[boot]
systemd=true
EOF

  winuser="$(powershell.exe '$env:UserName' | tr -d '\r\n')"
  sudo tee /mnt/c/Users/${winuser}/.wslconfig <<EOF >/dev/null
[experimental]
autoMemoryReclaim=dropcache
sparseVhd=true
autoProxy=true
networkingMode=mirrored
dnsTunneling=true
firewall=true
EOF
  ln -sfn /mnt/c/Users/${winuser}/Desktop ${HOME}/Desktop
  sudo apt update
  sudo apt install -y git curl bash
  touch ${HOME}/.bootstrapped

  cat <<EOF
================================================
* Install Icons
(ref: https://learn.microsoft.com/ja-jp/windows/terminal/tutorials/custom-prompt-setup#use-terminal-icons-to-add-missing-folder-or-file-icons)
$ Install-Module -Name Terminal-Icons -Repository PSGallery
================================================
EOF
}

### main ###
mkdir -p ${HOME}/.config
ln -sfn ${SCRIPT_DIR} ${HOME}/.config/home-manager

zshenv_local_file=${HOME}/.zshenv.local
if [ ! -f "${zshenv_local_file}" ]; then
    cat << 'EOF' > "${zshenv_local_file}"
export PROMPT_KUBE_TRIM_PREFIX=""
export PROMPT_KUBE_IMPORT_CONTEXT_PATTERN=${PROMPT_KUBE_IMPORT_CONTEXT_PATTERN:-}
export GH_ENTERPRISE_HOST=${GH_ENTERPRISE_HOST:-}
export GH_ENTERPRISE_TOKEN=${GH_ENTERPRISE_TOKEN:-}
export GITHUB_TOKEN=${GITHUB_TOKEN:-}
export GITLAB_ENTERPRISE_HOST=${GITLAB_ENTERPRISE_HOST:-}
export GITLAB_ENTERPRISE_TOKEN=${GITLAB_ENTERPRISE_TOKEN:-}
export GITLAB_TOKEN=${GITLAB_TOKEN:-}
EOF
fi

setup_for_wsl2
cat << EOF > "${SCRIPT_DIR}"/system.nix
{
  username = "${USER}";
  home = "${HOME}";
  system = "$(get_architecture)";
}
EOF
if [ -x "$(command -v home-manager)" ]; then
  home-manager switch --cores 10 -b .backup
else
  if [ -x "$(command -v nix)" ]; then
    nix run home-manager/release-23.11 -- switch --cores 10 -b .backup
  fi
fi
