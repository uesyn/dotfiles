#!/bin/sh

export OPT_DIR=${OPT_DIR:-${HOME}/opt}
export PATH="${OPT_DIR}/bin:${PATH}"
SCRIPT_DIR="$(cd $(dirname $0); pwd)"

# fork from https://starship.rs/install.sh
info() {
  printf '%s\n' "${BOLD}${GREY}>${NO_COLOR} $*"
}

# fork from https://starship.rs/install.sh
warn() {
  printf '%s\n' "${YELLOW}! $*${NO_COLOR}"
}

# fork from https://starship.rs/install.sh
error() {
  printf '%s\n' "${RED}x $*${NO_COLOR}" >&2
}

# fork from https://starship.rs/install.sh
detect_target() {
  platform="$(uname -s | tr '[:upper:]' '[:lower:]')"
  arch="$(uname -m | tr '[:upper:]' '[:lower:]')"

  case "${platform}" in
    linux) platform="linux" ;;
    darwin) platform="darwin" ;;
  esac

  case "${arch}" in
    x86_64) arch="amd64" ;;
    aarch64) arch="arm64" ;;
    armv*) arch="arm" ;;
  esac

  printf '%s' "$platform-$arch"
}

# fork from https://starship.rs/install.sh
download() {
  file="$1"
  url="$2"

  if [ -x "$(command -v curl)" ]; then
    cmd="curl --fail --silent --location --output $file $url"
  elif [ -x "$(command -v wget)" ]; then
    cmd="wget --quiet --output-document=$file $url"
  elif [ -x "$(command -v fetch)" ]; then
    cmd="fetch --quiet --output=$file $url"
  else
    error "No HTTP download program (curl, wget, fetch) found, exiting..."
    return 1
  fi

  $cmd && return 0 || rc=$?
  return $rc
}

make_link() {
  from=$1
  to=$2
  mkdir -p $(dirname ${to})
  [ -L ${to} ] && rm ${to}
  ln -sfn ${from} ${to}
}

make_links(){
  XDG_CONFIG_HOME=${HOME}/.config
  make_link ${SCRIPT_DIR}/bashrc ${HOME}/.bashrc
  make_link ${SCRIPT_DIR}/bash_profile ${HOME}/.bash_profile
  make_link ${SCRIPT_DIR}/zshrc ${HOME}/.zshrc
  make_link ${SCRIPT_DIR}/zsh ${XDG_CONFIG_HOME}/zsh
  make_link ${SCRIPT_DIR}/nvim ${XDG_CONFIG_HOME}/nvim
  make_link ${SCRIPT_DIR}/git ${XDG_CONFIG_HOME}/git
  make_link ${SCRIPT_DIR}/aqua/aqua.yaml ${XDG_CONFIG_HOME}/aquaproj-aqua/aqua.yaml
  make_link ${SCRIPT_DIR}/gh/config.yml ${XDG_CONFIG_HOME}/gh/config.yml
  make_link ${SCRIPT_DIR}/zellij ${XDG_CONFIG_HOME}/zellij
  make_link ${SCRIPT_DIR}/wezterm.lua ${XDG_CONFIG_HOME}/wezterm/wezterm.lua
  make_link ${SCRIPT_DIR}/devbox ${XDG_CONFIG_HOME}/devbox
  make_link ${SCRIPT_DIR}/rtx ${XDG_CONFIG_HOME}/rtx
  for file in ${SCRIPT_DIR}/bin/*; do make_link ${SCRIPT_DIR}/bin/${file##*/} ${HOME}/opt/bin/${file##*/}; done
}

setup_tea() {
  info "Installing tea..."
  tea_path="${OPT_DIR}/bin/tea"
  tea_url="https://tea.xyz/$(uname)/$(uname -m)"

  if [ -x ${tea_path} ]; then
    if [ ! -d ${HOME}/.tea ]; then
      ${tea_path} --sync
    fi
    return
  fi

  download "${tea_path}" "${tea_url}"
  chmod u+x ${tea_path}
  if [ ! -d ${HOME}/.tea ]; then
    ${tea_path} --sync
  fi
}

setup_coreutils() {
  coreutils_version=0.0.18
  export PATH=${HOME}/opt/coreutils/bin:${PATH}
  info "Installing coreutils..."
  case "$(detect_target)" in
    darwin-arm64)
      # TODO: use aarch64 version if it released
      warn "unsupported"
      return 0
      coreutils_basename=coreutils-${coreutils_version}-x86_64-apple-darwin
      ;;
    darwin-amd64)
      coreutils_basename=coreutils-${coreutils_version}-x86_64-apple-darwin
      ;;
    linux-amd64)
      coreutils_basename=coreutils-${coreutils_version}-x86_64-unknown-linux-musl
      ;;
    linux-arm64)
      coreutils_basename=coreutils-${coreutils_version}-aarch64-unknown-linux-gnu
      ;;
    linux-arm)
      coreutils_basename=coreutils-${coreutils_version}-arm-unknown-linux-gnueabihf
      ;;
    *) warn "Unsupported platform for aqua: $(detect_target)"; return 0 ;;
  esac
  coreutils_url=https://github.com/uutils/coreutils/releases/download/${coreutils_version}/${coreutils_basename}.tar.gz
  coreutils_tmp=/tmp/coreutils.tar.gz
  coreutils_dir=${OPT_DIR}/coreutils
  coreutils_bin=${coreutils_dir}/coreutils_${coreutils_version}
  coreutils_cmds_dir=${coreutils_dir}/bin

  coreutils_installed=
  if [ ! -x ${coreutils_bin} ]; then
    mkdir -p ${coreutils_dir}
    download ${coreutils_tmp} ${coreutils_url}
    tar zxf ${coreutils_tmp} ${coreutils_basename}/coreutils -O > ${coreutils_bin}
    chmod +x ${coreutils_bin}
    coreutils_installed=true
  fi

  if [ -d "${coreutils_cmds_dir}" ] && [ -z "${coreutils_installed}" ]; then
    return
  fi

  rm -rf ${coreutils_cmds_dir}
  mkdir -p ${coreutils_cmds_dir}
#  cmds='[:arch:b2sum:b3sum:base32:base64:basename:basenc:cat:chgrp:chmod:chown:chroot:cksum:comm:cp:csplit:cut:date:dd:df:dir:dircolors:dirname:du:echo:env:expand:expr:factor:false:fmt:fold:groups:hashsum:head:hostid:hostname:id:install:join:kill:link:ln:logname:ls:md5sum:mkdir:mkfifo:mknod:mktemp:more:mv:nice:nl:nohup:nproc:numfmt:od:paste:pathchk:pr:printenv:printf:ptx:pwd:readlink:realpath:relpath:rm:rmdir:seq:sha1sum:sha224sum:sha256sum:sha3-224sum:sha3-256sum:sha3-384sum:sha3-512sum:sha384sum:sha3sum:sha512sum:shake128sum:shake256sum:shred:shuf:sleep:sort:split:stat:stty:sum:sync:tac:tail:tee:test:timeout:touch:tr:true:truncate:tsort:tty:uname:unexpand:uniq:unlink:vdir:wc:whoami:yes:'
  # Use arch and uname of native MacOS command.
  cmds='[:b2sum:b3sum:base32:base64:basename:basenc:cat:chgrp:chmod:chown:chroot:cksum:comm:cp:csplit:cut:date:dd:df:dir:dircolors:dirname:du:echo:env:expand:expr:factor:false:fmt:fold:groups:hashsum:head:hostid:hostname:id:install:join:kill:link:ln:logname:ls:md5sum:mkdir:mkfifo:mknod:mktemp:more:mv:nice:nl:nohup:nproc:numfmt:od:paste:pathchk:pr:printenv:printf:ptx:pwd:readlink:realpath:relpath:rm:rmdir:seq:sha1sum:sha224sum:sha256sum:sha3-224sum:sha3-256sum:sha3-384sum:sha3-512sum:sha384sum:sha3sum:sha512sum:shake128sum:shake256sum:shred:shuf:sleep:sort:split:stat:stty:sum:sync:tac:tail:tee:test:timeout:touch:tr:true:truncate:tsort:tty:unexpand:uniq:unlink:vdir:wc:whoami:yes:'
  while [ -n "$cmds" ]; do
    cmd="${cmds%%:*}"
    ln ${coreutils_bin} ${coreutils_cmds_dir}/${cmd}
    cmds=${cmds#*:}
  done

  info "coreutils installed!"
}

setup_zsh() {
  info "Installing zsh..."
  if [ -x "$(command -v zsh)" ]; then
    return
  fi
  zsh_dir=${HOME}/opt/zsh
  zsh_bin_version=6.1.1
  sh -c "$(curl -SsfL https://raw.githubusercontent.com/romkatv/zsh-bin/v${zsh_bin_version}/install)" -- -e no -d ${zsh_dir} -q
  info "zsh installed!"
}

install_aqua() {
  aqua_version=2.3.0
  info "Installing aqua..."
  if [ -x "$(command -v aqua)" ]; then
    version=$(aqua version | cut -f3 -d" ")
    if [ "${aqua_version}" = "${version}" ]; then
      return
    fi
  fi

  case "$(detect_target)" in
    darwin-arm64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_arm64.tar.gz
      ;;
    darwin-amd64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_amd64.tar.gz
      ;;
    linux-amd64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_amd64.tar.gz
      ;;
    linux-arm64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_arm64.tar.gz
      ;;
    linux-arm)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_arm.tar.gz
      ;;
    *) warn "Unsupported platform for aqua: $(detect_target)"; return 0 ;;
  esac

  aqua_tmp=/tmp/aqua.tar.gz
  aqua_bin=${OPT_DIR}/bin/aqua
  aqua_bin_tmp=${OPT_DIR}/bin/.aqua.tmp

  mkdir -p ${OPT_DIR}/bin
  download ${aqua_tmp} ${aqua_url}
  tar xf ${aqua_tmp} -O aqua > ${aqua_bin_tmp}
  chmod +x ${aqua_bin_tmp}
  mv ${aqua_bin_tmp} ${aqua_bin}

  rm ${aqua_tmp}
  info "aqua installed!"
}

setup_aqua() {
  install_aqua
  export AQUA_GLOBAL_CONFIG=${HOME}/.config/aquaproj-aqua/aqua.yaml
  export PATH=${HOME}/.local/share/aquaproj-aqua/bin:${PATH}
  aqua install -a --tags precede
}

make_local_configs() {
  zlogin_file=${HOME}/.zlogin
  if [ ! -f "${zlogin_file}" ]; then
    cat << 'EOF' > ${zlogin_file}
export PROMPT_KUBE_TRIM_PREFIX=""
export PROMPT_KUBE_IMPORT_CONTEXT_PATTERN=${PROMPT_KUBE_IMPORT_CONTEXT_PATTERN:-}
export GH_ENTERPRISE_HOST=${GH_ENTERPRISE_HOST:-}
export GH_ENTERPRISE_TOKEN=${GH_ENTERPRISE_TOKEN:-}
export GITHUB_TOKEN=${GITHUB_TOKEN:-}
export GITLAB_ENTERPRISE_HOST=${GITLAB_ENTERPRISE_HOST:-}
export GITLAB_ENTERPRISE_TOKEN=${GITLAB_ENTERPRISE_TOKEN:-}
export GITLAB_TOKEN=${GITLAB_TOKEN:-}
if [[ -n "$MY_GITHUB_TOKEN" ]]; then
  export GITHUB_TOKEN=$MY_GITHUB_TOKEN
fi
EOF
  fi
}

setup_for_codespace() {
  if [ -z "$GITHUB_CODESPACE_TOKEN" ]; then
    return 0
  fi
  mkdir -p ${HOME}/opt/bin
  ln -sfn /bin/git ${HOME}/opt/bin/git
}

show_infos() {
  local file="${HOME}/.cache/.bootstrapped"
  [ -f "${file}" ] && return;
  touch ${file}
  case "$(uname -r)" in
    *WSL2)
      cat <<- EOF
==================== INFO ======================
* Create /etc/wsl.conf with below contents:
[boot]
systemd=true

[interop]
appendWindowsPath=true

[network]
generateResolvConf = false

* Create /etc/resolv.conf with below contents:
nameserver 8.8.8.8

* Install Icons
(ref: https://learn.microsoft.com/ja-jp/windows/terminal/tutorials/custom-prompt-setup#use-terminal-icons-to-add-missing-folder-or-file-icons)
$ Install-Module -Name Terminal-Icons -Repository PSGallery
================================================
EOF
    ;;
  esac
}

setup_neovim() {
  info "Installing neovim and plugins..."
  NVIM_VERSION=0.9.0
  rm -f ${OPT_DIR}/bin/nvim*
  ln $(which tea) ${OPT_DIR}/bin/nvim=${NVIM_VERSION}
  ln -sfn ${OPT_DIR}/bin/nvim=${NVIM_VERSION} ${OPT_DIR}/bin/nvim
  nvim --headless "+Lazy! restore" +qa
}

setup_jq() {
  info "Installing jq..."
  JQ_VERSION=1.6
  rm -f ${OPT_DIR}/bin/jq*
  ln $(which tea) ${OPT_DIR}/bin/jq=${JQ_VERSION}
  ln -sfn ${OPT_DIR}/bin/jq=${JQ_VERSION} ${OPT_DIR}/bin/jq
}

setup_rust_analyzer() {
  info "Installing rust-analyzer..."
  RUST_ANALYZER_VERSION=1.69.0
  rm -f ${OPT_DIR}/bin/rust-analyzer*
  ln $(which tea) ${OPT_DIR}/bin/rust-analyzer=${RUST_ANALYZER_VERSION}
  ln -sfn ${OPT_DIR}/bin/rust-analyzer=${RUST_ANALYZER_VERSION} ${OPT_DIR}/bin/rust-analyzer
}

setup_rtx() {
  info "Installing rtx..."
  local rtx_version=v1.28.6
  local rtx_path="${OPT_DIR}/bin/rtx"
  local rtx_url

  if [ -x "$(command -v rtx)" ]; then
    version=$(rtx version | cut -f1 -d" ")
    if [ "${rtx_version}" = "v${version}" ]; then
      return
    fi
  fi

  rtx_url=https://github.com/jdxcode/rtx/releases/download/${rtx_version}/rtx-${rtx_version}
  case "$(detect_target)" in
    darwin-arm64)
      rtx_url=${rtx_url}-macos-arm64
      ;;
    darwin-amd64)
      rtx_url=${rtx_url}-macos-x64
      ;;
    linux-arm64)
      rtx_url=${rtx_url}-linux-arm64
      ;;
    linux-amd64)
      rtx_url=${rtx_url}-linux-x64
      ;;
    *) warn "Unsupported platform for rtx: $(detect_target)"; return 0 ;;
  esac

  rm -f ${rtx_path}
  download ${rtx_path} ${rtx_url}
  chmod +x ${rtx_path}
  ${rtx_path} plugin add rust
  ${rtx_path} plugin add nodejs
}

### main ###
# setup_coreutils
make_links
make_local_configs
setup_tea
setup_zsh
setup_for_codespace
setup_aqua
setup_neovim
setup_jq
setup_rust_analyzer
setup_rtx
show_infos
