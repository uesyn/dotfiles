#!/bin/sh

set -eu

export OPT_DIR=${OPT_DIR:-${HOME}/opt}
export OPT_BIN=${OPT_DIR}/bin
export BOOTSTRAP_CACHE_DIR=${HOME}/.cache/bootstrap
mkdir -p ${OPT_BIN}
mkdir -p ${BOOTSTRAP_CACHE_DIR}
export PATH="${OPT_BIN}:${PATH}"
SCRIPT_DIR="$(cd $(dirname $0); pwd)"

# fork from https://starship.rs/install.sh
info() {
  printf '%s\n' "> $*"
}

# fork from https://starship.rs/install.sh
warn() {
  printf '%s\n' "! $*"
}

# fork from https://starship.rs/install.sh
error() {
  printf '%s\n' "x $*" >&2
}

# fork from https://starship.rs/install.sh
detect_target() {
  platform="$(uname -s | tr '[:upper:]' '[:lower:]')"
  arch="$(uname -m | tr '[:upper:]' '[:lower:]')"

  case "${platform}" in
    linux) platform="linux" ;;
    darwin) platform="darwin" ;;
  esac

  case "${arch}" in
    x86_64) arch="amd64" ;;
    aarch64) arch="arm64" ;;
    armv*) arch="arm" ;;
  esac

  printf '%s' "$platform-$arch"
}

calc_hash() {
  if [ -x "$(command -v sha256sum)" ]; then
    printf "$1" | sha256sum | cut -c-64
    return
  elif [ -x "$(command -v shasum)" ]; then
    printf "$1" | shasum -a 256 | cut -c-64
    return
  fi
  return 1
}

download() {
  hash_key="$1"
  url="$2"
  file="${BOOTSTRAP_CACHE_DIR}/$(calc_hash ${hash_key})"
  tmpfile="$file.tmp"

  [ -f ${file} ] && return

  info "Downloading ${url}..."
  if [ -x "$(command -v curl)" ]; then
    cmd="curl --fail --silent --location --output $tmpfile $url"
  elif [ -x "$(command -v wget)" ]; then
    cmd="wget --quiet --output-document=$tmpfile $url"
  else
    error "No HTTP download program (curl, wget, fetch) found, exiting..."
    return 1
  fi

  $cmd && mv $tmpfile $file && return 0
  return $?
}

download_if_darwin_arm64() {
  [ "$(detect_target)" != "darwin-arm64" ] && return
  download "$1" "$2"
  return $?
}

download_if_darwin_amd64() {
  [ "$(detect_target)" != "darwin-amd64" ] && return
  download "$1" "$2"
  return $?
}

download_if_linux_arm64() {
  [ "$(detect_target)" != "linux-arm64" ] && return
  download "$1" "$2"
  return $?
}

download_if_linux_amd64() {
  [ "$(detect_target)" != "linux-amd64" ] && return
  download "$1" "$2"
  return $?
}

get_cache() {
  key=$1
  cache_file="${BOOTSTRAP_CACHE_DIR}/$(calc_hash ${key})"
  [ -f ${cache_file} ] && printf ${cache_file}
}

make_link() {
  from=$1
  to=$2
  mkdir -p $(dirname ${to})
  [ -L ${to} ] && rm ${to}
  ln -sfn ${from} ${to}
}

make_links(){
  XDG_CONFIG_HOME=${HOME}/.config
  make_link ${SCRIPT_DIR}/bashrc ${HOME}/.bashrc
  make_link ${SCRIPT_DIR}/bash_profile ${HOME}/.bash_profile
  make_link ${SCRIPT_DIR}/zshrc ${HOME}/.zshrc
  make_link ${SCRIPT_DIR}/zsh ${XDG_CONFIG_HOME}/zsh
  make_link ${SCRIPT_DIR}/nvim ${XDG_CONFIG_HOME}/nvim
  make_link ${SCRIPT_DIR}/git ${XDG_CONFIG_HOME}/git
  make_link ${SCRIPT_DIR}/aqua/aqua.yaml ${XDG_CONFIG_HOME}/aquaproj-aqua/aqua.yaml
  make_link ${SCRIPT_DIR}/gh/config.yml ${XDG_CONFIG_HOME}/gh/config.yml
  make_link ${SCRIPT_DIR}/zellij ${XDG_CONFIG_HOME}/zellij
  make_link ${SCRIPT_DIR}/wezterm.lua ${XDG_CONFIG_HOME}/wezterm/wezterm.lua
  make_link ${SCRIPT_DIR}/devk ${XDG_CONFIG_HOME}/devk
  make_link ${SCRIPT_DIR}/rtx ${XDG_CONFIG_HOME}/rtx
  make_link ${SCRIPT_DIR}/tmux ${XDG_CONFIG_HOME}/tmux
  for file in ${SCRIPT_DIR}/bin/*; do make_link ${SCRIPT_DIR}/bin/${file##*/} ${HOME}/opt/bin/${file##*/}; done
}

TEA_PREFIX=${TEA_PREFIX:-${HOME}/.tea}

setup_tea() {
  info "Installing tea..."

  tea_path="${OPT_BIN}/tea"
  tea_version="0.38.4"

  tea_key="tea_${tea_version}"
  download_if_linux_arm64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+linux+aarch64.tar.xz
  download_if_linux_amd64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+linux+x86-64.tar.xz
  download_if_darwin_arm64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+darwin+aarch64.tar.xz
  download_if_darwin_amd64 ${tea_key} https://github.com/teaxyz/cli/releases/download/v${tea_version}/tea-${tea_version}+darwin+x86-64.tar.xz

  cache_file=$(get_cache "${tea_key}")

  tar xJf ${cache_file} -C ${OPT_BIN}
  if [ $? -ne 0 ]; then
   echo "failed to execute...."
   exit 1
  fi
  chmod u+x ${tea_path}
  [ ! -d ${HOME}/.tea ] && ${tea_path} --sync
}

install_aqua() {
  aqua_version=2.9.0
  info "Installing aqua..."

  aqua_key="aqua_${aqua_version}"
  download_if_linux_arm64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_arm64.tar.gz
  download_if_linux_amd64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_amd64.tar.gz
  download_if_darwin_arm64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_arm64.tar.gz
  download_if_darwin_amd64 ${aqua_key} https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_amd64.tar.gz

  cache_file=$(get_cache "${aqua_key}")
  aqua_bin=${OPT_BIN}/aqua
  tar xzf ${cache_file} -O aqua > ${aqua_bin}
  chmod +x ${aqua_bin}
}

setup_aqua() {
  install_aqua
  export AQUA_GLOBAL_CONFIG=${HOME}/.config/aquaproj-aqua/aqua.yaml
  export PATH=${HOME}/.local/share/aquaproj-aqua/bin:${PATH}
  aqua install -a --tags precede
}

install_neovim() {
  info "Installing neovim..."
  neovim_dir=${OPT_DIR}/nvim
  neovim_bin_dir=${neovim_dir}/bin
  export PATH=${neovim_bin_dir}:$PATH
  neovim_version=v0.9.1

  neovim_key="neovim_${neovim_version}"
  download_if_linux_arm64 ${neovim_key} https://github.com/uesyn/neovim-arm64-builder/releases/download/${neovim_version}/nvim-linux-arm64.tar.gz
  download_if_linux_amd64 ${neovim_key} https://github.com/neovim/neovim/releases/download/${neovim_version}/nvim-linux64.tar.gz
  download_if_darwin_arm64 ${neovim_key} https://github.com/neovim/neovim/releases/download/${neovim_version}/nvim-macos.tar.gz
  download_if_darwin_amd64 ${neovim_key} https://github.com/neovim/neovim/releases/download/${neovim_version}/nvim-macos.tar.gz

  cache_file=$(get_cache ${neovim_key})

  rm -rf ${neovim_dir}
  mkdir -p ${neovim_dir}
  tar xzf ${cache_file} --strip-components=1 -C ${neovim_dir}
}

make_local_configs() {
  zlogin_file=${HOME}/.zlogin
  if [ ! -f "${zlogin_file}" ]; then
    cat << 'EOF' > ${zlogin_file}
export PROMPT_KUBE_TRIM_PREFIX=""
export PROMPT_KUBE_IMPORT_CONTEXT_PATTERN=${PROMPT_KUBE_IMPORT_CONTEXT_PATTERN:-}
export GH_ENTERPRISE_HOST=${GH_ENTERPRISE_HOST:-}
export GH_ENTERPRISE_TOKEN=${GH_ENTERPRISE_TOKEN:-}
export GITHUB_TOKEN=${GITHUB_TOKEN:-}
export GITLAB_ENTERPRISE_HOST=${GITLAB_ENTERPRISE_HOST:-}
export GITLAB_ENTERPRISE_TOKEN=${GITLAB_ENTERPRISE_TOKEN:-}
export GITLAB_TOKEN=${GITLAB_TOKEN:-}
if [[ -n "$MY_GITHUB_TOKEN" ]]; then
  export GITHUB_TOKEN=$MY_GITHUB_TOKEN
fi
EOF
  fi

  bashrc_local_file=${HOME}/.bashrc.local
  if [ ! -f "${bashrc_local_file}" ]; then
    cat << 'EOF' > ${bashrc_local_file}
source ${zlogin_file}
EOF
  fi
}

show_infos() {
  local file="${HOME}/.cache/.bootstrapped"
  [ -f "${file}" ] && return;
  touch ${file}
  case "$(uname -r)" in
    *WSL2)
      cat <<- EOF
==================== INFO ======================
* Create /etc/wsl.conf with below contents:
[boot]
systemd=true

[interop]
appendWindowsPath=true

[network]
generateResolvConf = false

* Create /etc/resolv.conf with below contents:
nameserver 8.8.8.8

* Install Icons
(ref: https://learn.microsoft.com/ja-jp/windows/terminal/tutorials/custom-prompt-setup#use-terminal-icons-to-add-missing-folder-or-file-icons)
$ Install-Module -Name Terminal-Icons -Repository PSGallery
================================================
EOF
    ;;
  esac
}

setup_rtx() {
  info "Installing rtx..."
  version=v1.34.1
  key="rtx_${version}"

  download_if_linux_arm64 ${key} https://github.com/jdxcode/rtx/releases/download/${version}/rtx-${version}-linux-arm64.tar.gz
  download_if_linux_amd64 ${key} https://github.com/jdxcode/rtx/releases/download/${version}/rtx-${version}-linux-x64.tar.gz
  download_if_darwin_arm64 ${key} https://github.com/jdxcode/rtx/releases/download/${version}/rtx-${version}-macos-arm64.tar.gz
  download_if_darwin_amd64 ${key} https://github.com/jdxcode/rtx/releases/download/${version}/rtx-${version}-macos-x64.tar.gz

  cache_file=$(get_cache ${key})
  tar xzf ${cache_file} -C ${OPT_BIN} rtx/bin/rtx --strip-components=2
}

setup_rust_analyzer() {
  info "Installing rust-analyzer..."
  version=2023-07-24
  key=rust-analyzer_${version}

  download_if_linux_arm64 ${key} https://github.com/rust-lang/rust-analyzer/releases/download/${version}/rust-analyzer-aarch64-unknown-linux-gnu.gz
  download_if_linux_amd64 ${key} https://github.com/rust-lang/rust-analyzer/releases/download/${version}/rust-analyzer-x86_64-unknown-linux-gnu.gz
  download_if_darwin_arm64 ${key} https://github.com/rust-lang/rust-analyzer/releases/download/${version}/rust-analyzer-aarch64-apple-darwin.gz
  download_if_darwin_amd64 ${key} https://github.com/rust-lang/rust-analyzer/releases/download/${version}/rust-analyzer-x86_64-apple-darwin.gz

  cache_file=$(get_cache ${key})
  bin=${OPT_BIN}/rust-analyzer
  gunzip -k -c ${cache_file} > ${bin}
  chmod +x ${bin}
}

make_tea_command_with_bin_name() {
  cmd_name=$1
  bin_name=$2
  tea_args=$3
  shift 3
  depends=$@

  depend_args=
  for d in ${depends}; do
    tea_args="${tea_args} +${d}"
  done

  cmd="exec tea ${tea_args} ${cmd_name} \"\$@\""
  bin_path=${OPT_BIN}/${bin_name}
  cat <<EOF > ${bin_path}
#!/usr/bin/env sh

${cmd}
EOF
  chmod +x ${bin_path}
}

make_tea_command() {
  cmd_name=$1
  tea_args=$2
  shift 2
  depends=$@
  make_tea_command_with_bin_name "${cmd_name}" "${cmd_name}" "${tea_args}" "${@}"
}

setup_zsh() {
  info "Installing zsh..."
  version=5.9.0
  make_tea_command "zsh" "--silent" "zsh.sourceforge.io=${version}"
}

setup_neovim() {
  info "Installing neovim and plugins..."
  # install_neovim
  make_tea_command "nvim" "" "neovim.io=0.9.1"
  nvim --headless "+Lazy! restore" +qa
  git checkout -- ${SCRIPT_DIR}/nvim/lazy-lock.json
  nvim --headless "+Lazy! restore" +qa
}

setup_jq() {
  info "Installing jq..."
  version=1.6
  make_tea_command "jq" "--silent" "stedolan.github.io/jq=${version}"
}

setup_yq() {
  info "Installing yq..."
  version=v4.34.1
  make_tea_command "yq" "--silent" "github.com/mikefarah/yq=${version}"
}

setup_gh() {
  info "Installing gh ..."
  make_tea_command "gh" "--silent" "cli.github.com=v2.32.1"
}

setup_tmux() {
  info "Installing tmux..."
  make_tea_command "tmux" "" "github.com/tmux/tmux=3.3a"
}

setup_zellij() {
  info "Installing zellij..."
  version=v0.37.2
  make_tea_command "zellij" "" "crates.io/zellij=${version}"
}

setup_node() {
  info "Installing node..."
  node_version=v20.0.0
  npm_version=9.6.6
  make_tea_command "node" "--silent" "nodejs.org=${node_version}" "npmjs.com=${npm_version}"
  make_tea_command "npx" "--silent" "nodejs.org=${node_version}" "npmjs.com=${npm_version}"
  make_tea_command "npm" "--silent" "nodejs.org=${node_version}" "npmjs.com=${npm_version}"
}

setup_deno() {
  info "Installing deno..."
  deno_version=1.35.2
  make_tea_command "deno" "--silent" "deno.land=${deno_version}"
}

setup_go() {
  info "Installing go..."
  go_version=1.20.6
  gopls_version=v0.12.4
  go_1_19_version="1.19.9"
  make_tea_command "go" "--silent" "go.dev=${go_version}"
  make_tea_command_with_bin_name "go" "go1.19" "--silent" "go.dev=${go_1_19_version}"
  gopls_path=${OPT_BIN}/gopls
  cat <<EOF > ${gopls_path}
#!/usr/bin/env sh

tea --silent +go.dev=${go_version} go run golang.org/x/tools/gopls@${gopls_version} "\$@"
EOF
  chmod +x ${gopls_path}
}

setup_kubectl() {
  info "Installing kubectl..."
  kubectl_version=1.27.4
  kubectl_1_26_version=1.26.5
  kubectl_1_25_version=1.25.10
  make_tea_command "kubectl" "--silent" "kubernetes.io/kubectl=${kubectl_version}"
  make_tea_command_with_bin_name "kubectl" "kubectl1.26" "--silent" "kubernetes.io/kubectl=${kubectl_1_26_version}"
  make_tea_command_with_bin_name "kubectl" "kubectl1.25" "--silent" "kubernetes.io/kubectl=${kubectl_1_25_version}"
}

setup_kind() {
  info "Installing kind..."
  kind_version=0.20.0
  make_tea_command "kind" "" "kind.sigs.k8s.io=${kind_version}"
}

setup_minikube() {
  info "Installing minikube..."
  minikube_version=1.31.1
  make_tea_command "minikube" "" "kubernetes.io/minikube=${minikube_version}"
}

setup_kustomize() {
  info "Installing kustomize..."
  version=v5.1.0
  make_tea_command "kustomize" "--silent" "kubernetes.io/kustomize=${version}"
}

setup_helm() {
  info "Installing helm..."
  version=v3.12.2
  make_tea_command "helm" "--silent" "helm.sh=${version}"
}

setup_kubectx() {
  info "Installing kubectx and kubens..."
  version=v0.9.5
  make_tea_command "kubectx" "" "kubectx.dev=${version}"
  make_tea_command "kubens" "" "kubectx.dev=${version}"
}

setup_fzf() {
  info "Installing fzf..."
  fzf_version=0.42.0
  make_tea_command "fzf" "--silent" "github.com/junegunn/fzf=${fzf_version}"
}

setup_ripgrep() {
  info "Installing ripgrep..."
  ripgrep_version=13.0.0
  make_tea_command "rg" "--silent" "crates.io/ripgrep=${ripgrep_version}"
}

setup_golangci_lint() {
  info "Installing golangci-lint..."
  version=v1.53.3
  make_tea_command "golangci-lint" "--silent" "golangci-lint.run=${version}"
}

setup_vault() {
  info "Installing vault..."
  version=v1.14.0
  make_tea_command "vault" "--silent" "vaultproject.io=${version}"
}

setup_zig() {
  info "Installing zig..."
  version=0.10.1
  make_tea_command "zig" "--silent" "ziglang.org=${version}"
}

setup_python() {
  info "Installing python..."
  python_version=3.11.3
  make_tea_command "python" "--silent" "python.org=${python_version}"
}

setup_ruby() {
  info "Installing ruby..."
  ruby_version=3.2.2
  gem_version=3.4.9
  make_tea_command "ruby" "--silent" "ruby-lang.org=${ruby_version}" "rubygems.org=${gem_version}"
  make_tea_command "gem" "--silent" "ruby-lang.org=${ruby_version}" "rubygems.org=${gem_version}"
}

setup_rustup_init() {
  info "Installing rustup-init..."
  rustup_init_path=${OPT_BIN}/rustup-init
  cat <<EOF > ${rustup_init_path}
#!/usr/bin/env sh

tea rustup-init --no-modify-path --default-toolchain nightly --profile default "\$@"
EOF
  chmod +x ${rustup_init_path}
}

setup_mc() {
  info "Installing mc"
  mc_path=${OPT_BIN}/mc
  cat <<EOF > ${mc_path}
#!/usr/bin/env sh

docker run -u $(id -u) --rm -v ${HOME}:${HOME} -w $(pwd) -v ${HOME}:${HOME} -i minio/mc:RELEASE.2023-07-21T20-44-27Z "\$@"
EOF
  chmod +x ${mc_path}
}

### main ###
make_links
make_local_configs
setup_tea &
setup_aqua &
setup_rtx &
setup_rust_analyzer &
wait
setup_zsh
setup_neovim
setup_jq
setup_yq
setup_gh
setup_tmux
setup_zellij
setup_node
setup_deno
setup_python
setup_ruby
setup_go
setup_zig
setup_rustup_init
setup_kubectl
setup_kustomize
setup_helm
setup_minikube
setup_kind
setup_kubectx
setup_fzf
setup_ripgrep
setup_golangci_lint
setup_vault
setup_mc
show_infos
