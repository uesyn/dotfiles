#!/bin/sh

export OPT_DIR=${OPT_DIR:-${HOME}/opt}
export OPT_BIN=${OPT_DIR}/bin
mkdir -p ${OPT_BIN}
export PATH="${OPT_BIN}:${PATH}"
SCRIPT_DIR="$(cd $(dirname $0); pwd)"

# fork from https://starship.rs/install.sh
info() {
  printf '%s\n' "${BOLD}${GREY}>${NO_COLOR} $*"
}

# fork from https://starship.rs/install.sh
warn() {
  printf '%s\n' "${YELLOW}! $*${NO_COLOR}"
}

# fork from https://starship.rs/install.sh
error() {
  printf '%s\n' "${RED}x $*${NO_COLOR}" >&2
}

# fork from https://starship.rs/install.sh
detect_target() {
  platform="$(uname -s | tr '[:upper:]' '[:lower:]')"
  arch="$(uname -m | tr '[:upper:]' '[:lower:]')"

  case "${platform}" in
    linux) platform="linux" ;;
    darwin) platform="darwin" ;;
  esac

  case "${arch}" in
    x86_64) arch="amd64" ;;
    aarch64) arch="arm64" ;;
    armv*) arch="arm" ;;
  esac

  printf '%s' "$platform-$arch"
}

# fork from https://starship.rs/install.sh
download() {
  file="$1"
  url="$2"

  if [ -x "$(command -v curl)" ]; then
    cmd="curl --fail --silent --location --output $file $url"
  elif [ -x "$(command -v wget)" ]; then
    cmd="wget --quiet --output-document=$file $url"
  elif [ -x "$(command -v fetch)" ]; then
    cmd="fetch --quiet --output=$file $url"
  else
    error "No HTTP download program (curl, wget, fetch) found, exiting..."
    return 1
  fi

  $cmd && return 0 || rc=$?
  return $rc
}

make_link() {
  from=$1
  to=$2
  mkdir -p $(dirname ${to})
  [ -L ${to} ] && rm ${to}
  ln -sfn ${from} ${to}
}

make_links(){
  XDG_CONFIG_HOME=${HOME}/.config
  make_link ${SCRIPT_DIR}/bashrc ${HOME}/.bashrc
  make_link ${SCRIPT_DIR}/bash_profile ${HOME}/.bash_profile
  make_link ${SCRIPT_DIR}/zshrc ${HOME}/.zshrc
  make_link ${SCRIPT_DIR}/zsh ${XDG_CONFIG_HOME}/zsh
  make_link ${SCRIPT_DIR}/nvim ${XDG_CONFIG_HOME}/nvim
  make_link ${SCRIPT_DIR}/git ${XDG_CONFIG_HOME}/git
  make_link ${SCRIPT_DIR}/aqua/aqua.yaml ${XDG_CONFIG_HOME}/aquaproj-aqua/aqua.yaml
  make_link ${SCRIPT_DIR}/gh/config.yml ${XDG_CONFIG_HOME}/gh/config.yml
  make_link ${SCRIPT_DIR}/zellij ${XDG_CONFIG_HOME}/zellij
  make_link ${SCRIPT_DIR}/wezterm.lua ${XDG_CONFIG_HOME}/wezterm/wezterm.lua
  make_link ${SCRIPT_DIR}/devbox ${XDG_CONFIG_HOME}/devbox
  make_link ${SCRIPT_DIR}/rtx ${XDG_CONFIG_HOME}/rtx
  make_link ${SCRIPT_DIR}/tmux ${XDG_CONFIG_HOME}/tmux
  for file in ${SCRIPT_DIR}/bin/*; do make_link ${SCRIPT_DIR}/bin/${file##*/} ${HOME}/opt/bin/${file##*/}; done
}

setup_tea() {
  info "Installing tea..."
  tea_path="${OPT_BIN}/tea"
  tea_url="https://tea.xyz/$(uname)/$(uname -m)"

  if [ -x ${tea_path} ]; then
    if [ ! -d ${HOME}/.tea ]; then
      ${tea_path} --sync
    fi
    return
  fi

  download "${tea_path}" "${tea_url}"
  chmod u+x ${tea_path}
  if [ ! -d ${HOME}/.tea ]; then
    ${tea_path} --sync
  fi
}

setup_zsh() {
  info "Installing zsh..."
  if [ -x "$(command -v zsh)" ]; then
    return
  fi
  zsh_dir=${HOME}/opt/zsh
  zsh_bin_version=6.1.1
  sh -c "$(curl -SsfL https://raw.githubusercontent.com/romkatv/zsh-bin/v${zsh_bin_version}/install)" -- -e no -d ${zsh_dir} -q
  info "zsh installed!"
}

install_aqua() {
  aqua_version=2.3.6
  info "Installing aqua..."
  if [ -x "$(command -v aqua)" ]; then
    version=$(aqua version | cut -f3 -d" ")
    if [ "${aqua_version}" = "${version}" ]; then
      return
    fi
  fi

  case "$(detect_target)" in
    darwin-arm64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_arm64.tar.gz
      ;;
    darwin-amd64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_darwin_amd64.tar.gz
      ;;
    linux-amd64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_amd64.tar.gz
      ;;
    linux-arm64)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_arm64.tar.gz
      ;;
    linux-arm)
      aqua_url=https://github.com/aquaproj/aqua/releases/download/v${aqua_version}/aqua_linux_arm.tar.gz
      ;;
    *) warn "Unsupported platform for aqua: $(detect_target)"; return 0 ;;
  esac

  aqua_tmp=/tmp/aqua.tar.gz
  aqua_bin=${OPT_BIN}/aqua
  aqua_bin_tmp=${OPT_BIN}/.aqua.tmp

  download ${aqua_tmp} ${aqua_url}
  tar xf ${aqua_tmp} -O aqua > ${aqua_bin_tmp}
  chmod +x ${aqua_bin_tmp}
  mv ${aqua_bin_tmp} ${aqua_bin}

  rm ${aqua_tmp}
  info "aqua installed!"
}

setup_aqua() {
  install_aqua
  export AQUA_GLOBAL_CONFIG=${HOME}/.config/aquaproj-aqua/aqua.yaml
  export PATH=${HOME}/.local/share/aquaproj-aqua/bin:${PATH}
  aqua install -a --tags precede
}

make_local_configs() {
  zlogin_file=${HOME}/.zlogin
  if [ ! -f "${zlogin_file}" ]; then
    cat << 'EOF' > ${zlogin_file}
export PROMPT_KUBE_TRIM_PREFIX=""
export PROMPT_KUBE_IMPORT_CONTEXT_PATTERN=${PROMPT_KUBE_IMPORT_CONTEXT_PATTERN:-}
export GH_ENTERPRISE_HOST=${GH_ENTERPRISE_HOST:-}
export GH_ENTERPRISE_TOKEN=${GH_ENTERPRISE_TOKEN:-}
export GITHUB_TOKEN=${GITHUB_TOKEN:-}
export GITLAB_ENTERPRISE_HOST=${GITLAB_ENTERPRISE_HOST:-}
export GITLAB_ENTERPRISE_TOKEN=${GITLAB_ENTERPRISE_TOKEN:-}
export GITLAB_TOKEN=${GITLAB_TOKEN:-}
if [[ -n "$MY_GITHUB_TOKEN" ]]; then
  export GITHUB_TOKEN=$MY_GITHUB_TOKEN
fi
EOF
  fi
}

show_infos() {
  local file="${HOME}/.cache/.bootstrapped"
  [ -f "${file}" ] && return;
  touch ${file}
  case "$(uname -r)" in
    *WSL2)
      cat <<- EOF
==================== INFO ======================
* Create /etc/wsl.conf with below contents:
[boot]
systemd=true

[interop]
appendWindowsPath=true

[network]
generateResolvConf = false

* Create /etc/resolv.conf with below contents:
nameserver 8.8.8.8

* Install Icons
(ref: https://learn.microsoft.com/ja-jp/windows/terminal/tutorials/custom-prompt-setup#use-terminal-icons-to-add-missing-folder-or-file-icons)
$ Install-Module -Name Terminal-Icons -Repository PSGallery
================================================
EOF
    ;;
  esac
}

TEA_PREFIX=${TEA_PREFIX:-${HOME}/.tea}

setup_neovim() {
  info "Installing neovim and plugins..."
  NVIM_VERSION=v0.9.0
  tea nvim=${NVIM_VERSION} --version >/dev/null
  ln -sfn ${TEA_PREFIX}/neovim.io/${NVIM_VERSION}/bin/nvim ${OPT_BIN}/nvim
  nvim --headless "+Lazy! restore" +qa
}

setup_jq() {
  info "Installing jq..."
  JQ_VERSION=v1.6.0
  tea jq=${JQ_VERSION} --version >/dev/null
  ln -sfn ${TEA_PREFIX}/stedolan.github.io/jq/${JQ_VERSION}/bin/jq ${OPT_BIN}/jq
}

setup_gh() {
  info "Installing gh ..."
  GH_VERSION=v2.27.0
  tea gh=${GH_VERSION} version >/dev/null
  ln -sfn ${TEA_PREFIX}/cli.github.com/${GH_VERSION}/bin/gh ${OPT_BIN}/gh
}

setup_rtx() {
  info "Installing rtx..."
  RTX_VERSION=v1.29.2
  tea rtx=${RTX_VERSION} version >/dev/null
  ln -sfn ${TEA_PREFIX}/crates.io/rtx-cli/${RTX_VERSION}/bin/rtx ${OPT_BIN}/rtx
  rtx plugin add rust
  rtx plugin add rust-analyzer
  rtx plugin add node
}

setup_tmux() {
  info "Installing tmux..."
  TMUX_VERSION=3.3
  rm -f ${OPT_BIN}/tmux*
  ln $(which tea) ${OPT_BIN}/tmux=3.3
  ln -sfn ${OPT_BIN}/tmux=3.3 ${OPT_BIN}/tmux
}

### main ###
make_links
make_local_configs
setup_tea &
setup_zsh &
setup_aqua &
wait
setup_neovim &
setup_jq &
setup_gh &
setup_rtx &
setup_tmux &
wait
show_infos
